# -*- coding: utf-8 -*-
"""Possum_Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wDBGEeDcHWdnrkBuLjqBueYw9RRjr_hW
"""

# === 1. Import libraries ===
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import r2_score, mean_squared_error
from xgboost import XGBRegressor
import kagglehub



import kagglehub

# Download latest version
path = kagglehub.dataset_download("abrambeyer/openintro-possum")

print("Path to dataset files:", path)

df = pd.read_csv(f"{path}/possum.csv")
df

df['Pop'].unique()

df['Pop'] = df['Pop'].map({'Vic':0,'other':1})

# Encode 'sex' and 'site' using LabelEncoder
le_sex = LabelEncoder()
df['sex'] = le_sex.fit_transform(df['sex'])

le_site = LabelEncoder()
df['site'] = le_site.fit_transform(df['site'])

df

df.columns

# Split features and target
X = df[['case', 'site', 'Pop', 'sex', 'hdlngth', 'skullw', 'totlngth',
       'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly']]
y = df['age']

# Train/test split
x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# === 8. Train XGBoost Regressor ===
xgb_model = XGBRegressor(
    n_estimators=100,
    max_depth=4,
    verbosity=0,
    random_state=42
)

xgb_model.fit(x_train, y_train)

!pip install xgboost

# === 10. Predict and Evaluate ===
y_pred = xgb_model.predict(x_test)

print("R² Score:", r2_score(y_test, y_pred))
print("Mean Squared Error:", mean_squared_error(y_test, y_pred))

# === 1. Import libraries ===
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import r2_score, mean_squared_error
from xgboost import XGBRegressor
import kagglehub

# === 2. Download dataset ===
path = kagglehub.dataset_download("abrambeyer/openintro-possum")
print("Path to dataset files:", path)

# === 3. Load data ===
df = pd.read_csv(f"{path}/possum.csv")
print("Data Loaded:\n", df.head())

# === 4. Encode target ===
# Treat age as continuous for regression
# Print unique values
print("Unique ages:", df['age'].unique())

# === 5. Encode categorical features ===
df['Pop'] = df['Pop'].map({'Vic': 0, 'other': 1})
df['sex'] = LabelEncoder().fit_transform(df['sex'])
df['site'] = LabelEncoder().fit_transform(df['site'])

# === 6. Select features and target ===
X = df[['case', 'site', 'Pop', 'sex', 'hdlngth', 'skullw', 'totlngth',
        'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly']]
y = df['age']

# === ✅ 7. Drop missing values ===
# Combine X and y to drop rows with NaNs in either
data = pd.concat([X, y], axis=1)
data = data.dropna()

# Split cleaned data
X = data.drop("age", axis=1)
y = data["age"]

# === 8. Train/test split ===
x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# === 9. Train XGBoost Regressor ===
xgb_model = XGBRegressor(
    n_estimators=100,
    max_depth=4,
    verbosity=0,
    random_state=42
)

xgb_model.fit(x_train, y_train)

# === 10. Predict and Evaluate ===
y_pred = xgb_model.predict(x_test)

print("R² Score:", r2_score(y_test, y_pred))
print("Mean Squared Error:", mean_squared_error(y_test, y_pred))

# === 11. Save model ===
import pickle
with open("xgboost_possum_model.pkl", "wb") as f:
    pickle.dump(xgb_model, f)
print("Model saved as xgboost_possum_model.pkl")

